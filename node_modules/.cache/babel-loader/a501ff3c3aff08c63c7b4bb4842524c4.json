{"ast":null,"code":"var _jsxFileName = \"/Users/CarrollJ/Desktop/karaoke-frontend/src/components/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport SongCard from \"./SongCard.js\"; // function Home({ addFav, userFavs, songs, userId }) {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home({\n  songs,\n  fav_songs,\n  set_fav_songs\n}) {\n  _s();\n\n  const [year, setYear] = useState(null);\n  const [name, setName] = useState(null);\n  const [lowPitch, setLowPitch] = useState(null);\n  const [highPitch, setHighPitch] = useState(null); // const userFavIds = userFavs.map(f => f.song_id)\n\n  let songsToDisplay = [...songs];\n\n  if (year) {\n    songsToDisplay = songsToDisplay.filter(song => {\n      return song.year === year;\n    });\n  }\n\n  if (name) {\n    songsToDisplay = songsToDisplay.filter(song => {\n      return song.name.toLowerCase().includes(name.toLowerCase());\n    });\n  }\n\n  if (lowPitch) {\n    songsToDisplay = songsToDisplay.filter(song => {\n      return song.lowest_pitch >= parseInt(lowPitch);\n    });\n  }\n\n  if (highPitch) {\n    songsToDisplay = songsToDisplay.filter(song => {\n      return song.highest_pitch <= parseInt(highPitch);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid padding\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"jumbotron jumbotron-fluid\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        class: \"lead\",\n        children: \"Find the perfect song for your needs using these filters:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"songNameInput\",\n        children: \"Song Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-control filter\",\n        id: \"songNameInput\",\n        placeholder: \"Type a song name...\",\n        onChange: e => {\n          const val = e.target.value;\n          setName(val);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"releaseYearSelect\",\n        children: \"Release Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        class: \"form-select\",\n        id: \"releaseYearSelect\",\n        \"aria-label\": \"Default select example\",\n        onChange: e => {\n          const val = e.target.value;\n          setYear(parseInt(val));\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          selected: true,\n          value: \"\",\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2020\",\n          children: \"2020\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2019\",\n          children: \"2019\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2018\",\n          children: \"2018\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2017\",\n          children: \"2017\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2016\",\n          children: \"2016\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"lowestNoteInput\",\n        children: \"Lowest Note:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-control filter\",\n        id: \"lowestNoteInput\",\n        onChange: e => {\n          setLowPitch(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"highestNoteInput\",\n        children: \"Highest Note:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-control filter\",\n        id: \"highestNoteInput\",\n        onChange: e => {\n          setHighPitch(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row padding\",\n      children: songsToDisplay.map(song => {\n        // const isFav = userFavIds.includes(song.id)\n        // return <SongCard addFav={addFav} key={song.id} song={song} isFav={isFav} />;\n        return /*#__PURE__*/_jsxDEV(SongCard, {\n          song: song,\n          favs: fav_songs,\n          set: set_fav_songs\n        }, song.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"/0kAysmQ8PqPtuU3h629pK9PFL8=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/CarrollJ/Desktop/karaoke-frontend/src/components/Home.js"],"names":["React","useState","SongCard","Home","songs","fav_songs","set_fav_songs","year","setYear","name","setName","lowPitch","setLowPitch","highPitch","setHighPitch","songsToDisplay","filter","song","toLowerCase","includes","lowest_pitch","parseInt","highest_pitch","e","val","target","value","map","id"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport SongCard from \"./SongCard.js\";\n\n// function Home({ addFav, userFavs, songs, userId }) {\nfunction Home({ songs, fav_songs, set_fav_songs }) {\n    const [year, setYear] = useState(null);\n    const [name, setName] = useState(null);\n    const [lowPitch, setLowPitch] = useState(null);\n    const [highPitch, setHighPitch] = useState(null);\n\n    // const userFavIds = userFavs.map(f => f.song_id)\n\n    let songsToDisplay = [...songs]\n    if(year) {\n        songsToDisplay = songsToDisplay.filter(song => {\n            return song.year === year\n        })\n    }\n    if(name) {\n        songsToDisplay = songsToDisplay.filter(song => {\n            return song.name.toLowerCase().includes(name.toLowerCase())\n        })\n    }\n    if(lowPitch) {\n      songsToDisplay = songsToDisplay.filter(song => {\n        return song.lowest_pitch >= parseInt(lowPitch)\n    })\n    }\n    if(highPitch) {\n      songsToDisplay = songsToDisplay.filter(song => {\n        return song.highest_pitch <= parseInt(highPitch)\n    })\n    }\n  return (\n    <div className=\"container-fluid padding\">\n      <div class=\"jumbotron jumbotron-fluid\">\n        <p class=\"lead\">Find the perfect song for your needs using these filters:</p>\n        <label for=\"songNameInput\">Song Name</label>\n        <input class=\"form-control filter\" id=\"songNameInput\" placeholder=\"Type a song name...\" onChange={(e) => {\n            const val=e.target.value\n            setName(val)\n        }}/>\n        {/* <div class=\"dropdown\">\n          <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            Year\n          </button>\n          <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\" onChange={(e) => {\n            const val=e.target.value\n            setYear(parseInt(val))\n          }}>\n            <a class=\"dropdown-item\" href=\"#\" value=\"2020\">2020</a>\n            <a class=\"dropdown-item\" href=\"#\" value=\"2019\">2019</a>\n          </div>\n        </div> */}\n        <label for=\"releaseYearSelect\">Release Year</label>\n        <select class=\"form-select\" id=\"releaseYearSelect\" aria-label=\"Default select example\" onChange={(e) => {\n            const val=e.target.value\n            setYear(parseInt(val))\n        }}>\n            <option selected value=\"\">Year</option>\n            <option value=\"2020\">2020</option>\n            <option value=\"2019\">2019</option>\n            <option value=\"2018\">2018</option>\n            <option value=\"2017\">2017</option>\n            <option value=\"2016\">2016</option>\n        </select>\n        <label for=\"lowestNoteInput\">Lowest Note:</label>\n        <input class=\"form-control filter\" id=\"lowestNoteInput\" onChange={(e) => {\n          setLowPitch(e.target.value)\n        }} />\n        <label for=\"highestNoteInput\">Highest Note:</label>\n        <input class=\"form-control filter\" id=\"highestNoteInput\" onChange={(e) => {\n          setHighPitch(e.target.value)\n        }} />\n\n\n      </div>\n      <div className=\"row padding\">\n        {songsToDisplay.map((song) => {\n            // const isFav = userFavIds.includes(song.id)\n          // return <SongCard addFav={addFav} key={song.id} song={song} isFav={isFav} />;\n          return <SongCard key={song.id} song={song} favs={fav_songs} set={set_fav_songs} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}